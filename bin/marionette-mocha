#! /usr/bin/env node

var Mocha = require('mocha'),
    Parent = require('../lib/parentrunner').ParentRunner,
    fs = require('fs'),
    argv = process.argv.slice(2),
    program = require('commander'),
    applyManifest;

var parsedArgv = program.
  option('-H, --host [host]', 
         'host module to use defaults to marionette-b2gdesktop-host').
  option('-R, --reporter [reporter]', 'mocha reporter to use').
  option('--profile-base [json or js file]', 
         'default profile options to use in all tests.').
  option('--profile-builder [builder]', 'profile generation module').
  option('-M, --manifest [manifest]', 'relative path to a JSON-formatted ' +
    'manifest file defining test runner whitelist or blacklist')

  // The following arguments have been copied directly from from mocha.js. This
  // enables marionette-mocha to:
  // 1. correctly report mocha.js's command-line options
  // 2. Differentiate which arguments reflect file names (so they may be
  // controlled via the `--manifest` option)
  // https://github.com/visionmedia/mocha/blob/35fe57573e222a44dfc17682f9bf159122405efa/bin/_mocha#L63-L86
  .version(JSON.parse(fs.readFileSync(
    __dirname + '/../package.json', 'utf8')).version)
  .usage('[debug] [options] [files]')
  .option('-r, --require <name>', 'require the given module')
  .option('-R, --reporter <name>', 'specify the reporter to use', 'dot')
  .option('-u, --ui <name>', 'specify user-interface (bdd|tdd|exports)', 'bdd')
  .option('-g, --grep <pattern>', 'only run tests matching <pattern>')
  .option('-i, --invert', 'inverts --grep matches')
  .option('-t, --timeout <ms>', 'set test-case timeout in milliseconds [2000]')
  .option('-s, --slow <ms>', '"slow" test threshold in milliseconds [75]')
  .option('-w, --watch', 'watch files for changes')
  .option('-c, --colors', 'force enabling of colors')
  .option('-C, --no-colors', 'force disabling of colors')
  .option('-G, --growl', 'enable growl notification support')
  .option('-d, --debug', "enable node's debugger, synonym for node --debug")
  .option('-b, --bail', "bail after first test failure")
  .option('-A, --async-only', "force all tests to take a callback (async)")
  .option('--recursive', 'include sub directories')
  .option('--debug-brk', "enable node's debugger breaking on the first line")
  .option('--globals <names>',
    'allow the given comma-delimited global [names]')
  .option('--check-leaks', 'check for global variable leaks')
  .option('--interfaces', 'display available interfaces')
  .option('--reporters', 'display available reporters')
  .option('--compilers <ext>:<module>,...',
    'use the given module(s) to compile files')

  .parse(process.argv);


var Reporter;
try {
  Reporter = require(program.reporter);
} catch(e) {
  Reporter = require('mocha/lib/reporters/' + (program.reporter || 'dot'));
}

// we default to b2g-desktop which is the most reliable.
program.host =
  program.host || 'marionette-b2gdesktop-host';

program.profileBuilder =
  program.profileBuilder || 'marionette-profile-builder';

var Host = require(program.host),
    ProfileBuilder = require(program.profileBuilder);

// parse base profile options
var profileBase;
if (program.profileBase) {
  // remember because require is used json files or JS files can be used.
  profileBase = require(program.profileBase);
}

if (program.manifest) {
  applyManifest = require('../lib/applymanifest');
  try {
    argv = applyManifest(program.manifest, program.args, argv);
  } catch(err) {
    console.error(err);
    process.exit(1);
  }
}

// attempt to find the reporter argument
var runner = new Parent(argv);
runner.run({
  Reporter: Reporter,
  Host: Host,
  ProfileBuilder: ProfileBuilder,
  profileBase: profileBase
});

// pipe stdout & stderr.
runner.process.stdout.pipe(process.stdout);
runner.process.stderr.pipe(process.stderr);

runner.process.on('exit', process.exit);
